{"data":{"markdownRemark":{"html":"<p>How I set up VSCode <!--more--></p>\n<ul>\n<li>I hit C-S-p, selected color theme and chose Solarized Dark</li>\n<li><code class=\"language-text\">C-,</code>, opened settings where I set the font Hasklig, and enabled <em>font ligatures</em>. </li>\n<li>Installed extensions relevant for the programming modes I use.</li>\n</ul>\n<p>Things I immediately miss from Emacs:</p>\n<ul>\n<li>dired</li>\n<li>the minibuffer, e.g. open a file from minibuffer.</li>\n</ul>\n<p>Customization</p>\n<ul>\n<li>Coming from Emacs, I have the notion that mostly anything that can be thought up can ultimately be customized (via Emacs-Lisp)<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, </li>\n</ul>\n<p>Things I sort of miss from Emacs</p>\n<ul>\n<li>org-mode - Always having your note taking tool available (e.g. org-capture).</li>\n</ul>\n<p>Things I like about VSCode</p>\n<ul>\n<li>Built in Zen mode. I like keeping my screen clear from everything but the text sometimes.</li>\n<li>Section folding built in. </li>\n<li>The settings configuration mode. It's quite minimal and smart. Focus in on creating a distributable text file for settings. </li>\n<li>Markdown preview built in.</li>\n</ul>\n<p>Things I strongly dislike about VSCode</p>\n<ul>\n<li>The hard blue color of the status bar can not be themed as of writing, I read this is about to soon be changed though.</li>\n</ul>\n<p>Working in Haskell</p>\n<ul>\n<li>Working in the programming language Haskell with some extensions, depending on Intero seems to work fine. Terminal integration is nice and auto completion in GHCi does work. </li>\n</ul>\n<p>Performance</p>\n<ul>\n<li>In comparison to Atom editor (or LightTable), VSCode launches much faster and seems to perform a lot better. I am surprised that a program based on Electron can perform this well.</li>\n</ul>\n<p>What you're giving up when moving from Emacs to VSCode</p>\n<ul>\n<li>Using the mouse. Emacs doesn't need one. VSCode will sometimes need mouse interaction. This can impact workflow.</li>\n</ul>\n<p>What's to be gained from using VScode over Emacs</p>\n<ul>\n<li>Fonts may look better.</li>\n<li>Performance may be more reliable.</li>\n</ul>\n<p>Conclusion,</p>\n<ul>\n<li>I'm seriously impressed by how mature of an editor VSCode is. I really think they should replace the default \"open file\" panes with something better (compare Emacs minibuffer, ido and such). I had tried Atom and managed to customize it to a functioning state, but really slow startup times and <em>performance reliability</em> made that editor feel bloated and unacceptably slow and I went back to GNU Emacs. </li>\n<li>The performance characteristics of GNU Emacs running on Windows are however quite poor in my experience and I even looked at minimal retro editors such as micro-emacs to always have a fast reliable text editor which always start up in under a second. MicroEmacs achieve that but the downsides are many - apart from all the possible functionality one gives up, making text <em>look decent</em> can be very hard, near impossible. Perhaps running a microEmacs in a good terminal emulator is a smart choice, but if you're on Windows for whatever reason, there really isn't a good terminal emulator available.</li>\n</ul>\n<p><em>Update</em>, <em>April 1st, 2017</em>:</p>\n<ul>\n<li>\n<p>For quickly opening files, there are extensions such as:</p>\n<ul>\n<li>Hive Opener</li>\n<li>Quick Open (I just bind this to <code class=\"language-text\">C-o</code> keyboard shortcut.)</li>\n<li>See <a href=\"this%20helpful%20chart\">https://github.com/rainbyte/haskell-ide-chart</a> for an overview of the level of Haskell support in various editors..</li>\n</ul>\n</li>\n</ul>\n<p><em>Update</em>, <em>April 2nd, 2017</em>:</p>\n<ul>\n<li>The <a href=\"status%20bar%20color%20can%20now%20be%20themed\">https://github.com/Microsoft/vscode/issues/1884#issuecomment-290940262</a>! VSCode looks really good now.</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Of course, the limitation of emacs-lisp are there. Some things in Emacs are after all decided in compiled C code. </p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â†©</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"VSCode Insiders 2017 Review - Coming from Emacs"}}},"pageContext":{"slug":"/blog-posts/2017-04-01-VSCodeReview2017/"}}