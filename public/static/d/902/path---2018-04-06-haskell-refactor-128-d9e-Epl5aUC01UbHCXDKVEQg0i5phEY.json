{"data":{"markdownRemark":{"html":"<p>Using the symbols <code class=\"language-text\">&gt;&gt;=</code> (bind) <code class=\"language-text\">&lt;$&gt;</code> (fmap) and <code class=\"language-text\">&lt;*&gt;</code> we can improve our Haskell programs.</p>\n<!--more-->\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">extractDomain</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Text</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Text</span>\n<span class=\"token hvariable\">extractDomain</span> <span class=\"token hvariable\">url</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">case</span> <span class=\"token hvariable\">parseURI</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unpack</span> <span class=\"token hvariable\">url</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span>\n        <span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"\"</span>\n        <span class=\"token constant\">Just</span> <span class=\"token hvariable\">uri</span> <span class=\"token operator\">-></span>\n            <span class=\"token keyword\">case</span> <span class=\"token hvariable\">uriAuthority</span> <span class=\"token hvariable\">uri</span> <span class=\"token keyword\">of</span>\n                <span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"\"</span>\n                <span class=\"token constant\">Just</span> <span class=\"token hvariable\">auth</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">pack</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">uriRegName</span> <span class=\"token hvariable\">auth</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">extractDomainB</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Text</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Text</span>\n<span class=\"token hvariable\">extractDomainB</span> <span class=\"token hvariable\">url</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">fromMaybe</span> <span class=\"token string\">\"\"</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">parseURI</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">unpack</span> <span class=\"token hvariable\">url</span><span class=\"token punctuation\">)</span>\n                     <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">uriAuthority</span>\n                     <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">pure</span><span class=\"token operator\"> . </span><span class=\"token builtin\">pack</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">uriRegName</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- | Retrieve the members of a set</span>\n<span class=\"token hvariable\">sout</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Connection</span> <span class=\"token operator\">-></span> <span class=\"token constant\">ByteString</span> <span class=\"token operator\">-></span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">ByteString</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- (Either Reply [ByteString])</span>\n<span class=\"token hvariable\">sout</span> <span class=\"token hvariable\">conn</span> <span class=\"token hvariable\">k</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">members</span> <span class=\"token operator\">&lt;-</span>\n    <span class=\"token hvariable\">liftIO</span> <span class=\"token operator\">$</span>\n    <span class=\"token hvariable\">runRedis</span> <span class=\"token hvariable\">conn</span> <span class=\"token operator\">$</span> <span class=\"token keyword\">do</span>\n      <span class=\"token hvariable\">res</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">smembers</span> <span class=\"token hvariable\">k</span><span class=\"token punctuation\">)</span>\n      <span class=\"token hvariable\">mem</span> <span class=\"token operator\">&lt;-</span>\n        <span class=\"token keyword\">case</span> <span class=\"token hvariable\">res</span> <span class=\"token keyword\">of</span>\n          <span class=\"token constant\">Left</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">-- Hmm</span>\n          <span class=\"token constant\">Right</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">return</span> <span class=\"token hvariable\">m</span>\n      <span class=\"token builtin\">return</span> <span class=\"token hvariable\">mem</span>\n  <span class=\"token builtin\">return</span> <span class=\"token hvariable\">members</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- | Retrieve the members of a set</span>\n<span class=\"token hvariable\">sout</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Connection</span> <span class=\"token operator\">-></span> <span class=\"token constant\">ByteString</span> <span class=\"token operator\">-></span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">ByteString</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">sout</span> <span class=\"token hvariable\">conn</span> <span class=\"token hvariable\">k</span> <span class=\"token operator\">=</span> \n    <span class=\"token hvariable\">runRedis</span> <span class=\"token hvariable\">conn</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">either</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">id</span> <span class=\"token operator\">&lt;$></span> <span class=\"token hvariable\">smembers</span> <span class=\"token hvariable\">k</span></code></pre></div>","frontmatter":{"title":"Improving basic haskell programs"},"fields":{"date":"2018-04-06"}}},"pageContext":{"slug":"/2018/04/06/haskell-refactor/"}}