# Created 2015-04-17 fre 22:10
#+OPTIONS: toc:4 h:4
#+TITLE: jmn's Emacs configuration
#+AUTHOR: Jussi Norlund
#+STARTUP: align indent fold nodlcheck hidestars oddeven lognotestate overview
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.jmnorlund.net/css/base.css" />
#+HTML_HEAD_EXTRA: <script src="https://carnivalapp.io/sites/20/init.js"></script>
#+HTML_HEAD_EXTRA: <script>document.addEventListener("DOMContentLoaded", function() { Carnival.init({enabled: true, article_author: "jmn", article_selector: "div#content", block_selector: ":scope p, :scope pre",});});</script>
* Configuration
** About this file
This is my configuration file for GNU Emacs. 

Inspired by Sacha Chua's configuration. Parts of this file are directly copied from their configuration.
See [[http://sach.ac/dotemacs]]

This configuration file uses org-babel to load. Load this file using
=(org-babel-load-file "/path/to/file")=,
changing the path appropriately, but you'll probably want to tweak it
extensively first. 

Tips:
- To edit source code blocks in org-mode, hit =C-c '=
- To show syntax highligting in code blocks use =M-x org-src-fontify-buffer=

*** Configure ~/.emacs.d/init.el
To load this file when Emacs starts I put the following code into =~/.emacs.d/init.el=:

#+BEGIN_SRC emacs-lisp :tangle no
        ;; This sets up the load path so that we can override it
        (package-initialize nil)
        ;; Override the packages with the git version of Org and other packages
        (add-to-list 'load-path "~/git/org-mode/lisp")
        (add-to-list 'load-path "~/git/org-mode/contrib/lisp")
        ;; Load the rest of the packages
        (package-initialize t)
        (setq package-enable-at-startup nil)
        (require 'org)
        (require 'ob-tangle)
        (org-babel-load-file (expand-file-name "~/git/notes/jmn.org"))
#+END_SRC

** Personal information
#+BEGIN_SRC emacs-lisp
      (setq user-full-name "jmn"
            user-mail-address "norlund@gmail.com")
#+END_SRC

** Emacs initialization
*** Add my elisp directory and other files
#+BEGIN_SRC emacs-lisp
        (add-to-list 'load-path "~/.emacs.d/elisp")
        (add-to-list 'load-path "~/elisp")
        ; (load-file "~/.emacs.secrets")        ; Contains private information
        (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
        (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
        (unless (package-installed-p 'use-package)
          (package-install 'use-package))
        (require 'use-package)
#+END_SRC
*** Paths
#+BEGIN_SRC emacs-lisp
        (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

*** Inhibit startup message
#+BEGIN_SRC emacs-lisp
        (setq inhibit-startup-buffer-menu t)
         (setq inhibit-startup-echo-area-message nil)
         (setq inhibit-startup-screen t)
         (setq initial-scratch-message ";; Scratch buffer 
        ")
#+END_SRC

*** Start the edit server
For use with "emacsclient".

#+BEGIN_SRC emacs-lisp
        (server-start)
#+END_SRC
** General configuration
*** Appearance
**** Theme
Good themes (dark): tango-dark, monokai, solarized-dark, heroku,
minimal (no colors), monochrome (same, misterioso), cyberpunk.
brighter themes: solarized-light, anti-zenburn

#+BEGIN_SRC emacs-lisp
        (setq monokai-use-variable-pitch nil)
        (setq visible-bell 1)                   ; Disables the audible bell.
#+END_SRC

**** Line numbers
#+BEGIN_SRC emacs-lisp
        (setq linum-format " %4d   ")
#+END_SRC

**** Fonts and faces
The default font is used for most faces. Sometimes I want to use a serif font non-monospace font such as Times New roman or Gotham HTF and other times I prefer a monospace font such as Consolas (Windows), Monaco (Mac) or Dejavu Sans (GNU/Linux).
***** Font helper function
Reminder (to self): To experiment with font selection, use the menu then the =C-u C-x == command to find the name of the font used.

Other faces, besides "default"  which you might want to set fonts for are: "fixed-pitch" and "linum".

#+BEGIN_SRC emacs-lisp
    (require 'cl)
      (defun font-candidate (&rest fonts)
         "Return existing font which first match."
         (find-if (lambda (f) (find-font (font-spec :name f))) fonts))
#+END_SRC

***** Default font
Choose which block to tangle depending on font preference. See also
the variable-pitch-mode for when you want to default to monospace but
sometimes toggle to use "variable pitch".

Alternative serif fonts on Windows: Cambria, Times New Roman, Gotham HTF Light (?)
#+BEGIN_SRC emacs-lisp :tangle no
        ;; Serif font as default font
        (when window-system
        (set-face-attribute 'default nil :font (font-candidate '"Times New Roman-14:weight=normal:height:120" "Liberation Serif-12" "FreeSerif-14" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
        )
#+END_SRC

#+BEGIN_SRC emacs-lisp
        ;; Monospace as default font
        (when window-system
        (set-face-attribute 'default nil :font (font-candidate '"Consolas-14:weight=normal:height=160" "DejaVu Sans Mono-11:weight=normal"))
        )
#+END_SRC

***** Variable Font setting on Microsoft Windows
- Monospace as variable pitch font
#+BEGIN_SRC emacs-lisp :tangle no
        (when window-system 
          (set-face-attribute 'variable-pitch nil :font (font-candidate '"Consolas-14:weight=normal:height=160" "DejaVu Sans Mono-10:weight=normal"))
          )
#+END_SRC

- Serif font as variable pitch font
#+BEGIN_SRC emacs-lisp
        (when window-system
          (set-face-attribute 'variable-pitch nil :font (font-candidate '"Times New Roman-14:weight=normal:height:120" "Liberation Serif-12" "FreeSerif-14" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
          )
#+END_SRC

***** Text mode font
#+BEGIN_SRC emacs-lisp
        (add-hook 'text-mode-hook 'variable-pitch-mode)
#+END_SRC

***** Font for org-mode tables and code blocks
([[https://yoo2080.wordpress.com/2013/05/30/monospace-font-in-tables-and-source-code-blocks-in-org-mode-proportional-font-in-other-parts/][source]])
#+BEGIN_SRC emacs-lisp
        (defun my-adjoin-to-list-or-symbol (element list-or-symbol)
          (let ((list (if (not (listp list-or-symbol))
                          (list list-or-symbol)
                        list-or-symbol)))
            (require 'cl-lib)
            (cl-adjoin element list)))

        (eval-after-load "org"
          '(mapc
            (lambda (face)
              (set-face-attribute
               face nil
               :inherit
               (my-adjoin-to-list-or-symbol
                'fixed-pitch
                (face-attribute face :inherit))))
            (list 'org-code 'org-block 'org-table)))
#+END_SRC
***** Linum font
#+BEGIN_SRC emacs-lisp
        ;; (set-face-attribute 'linum nil :font (font-candidate '"Cambria-14" "Times New Roman-14:weight=normal:height:120" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
        ;; (set-face-attribute 'linum nil :font (font-candidate ' "Times New Roman-14:weight=normal:height:120" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
#+END_SRC
***** Pretty lambda
Display the greek character lambda instead of the word.
#+BEGIN_SRC emacs-lisp
        (use-package pretty-lambdada
          :ensure pretty-lambdada)
#+END_SRC

*** Backups
By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+BEGIN_SRC emacs-lisp
        (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
        (setq delete-old-versions -1)
        (setq version-control t)
        (setq vc-make-backup-files t)
        (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

*** Window configuration
**** Toolbars, menus et c
#+BEGIN_SRC emacs-lisp
        (when window-system
          (tooltip-mode -1)
          (tool-bar-mode -1)
          (set-fringe-mode 0)
        )
        (menu-bar-mode -1)
#+END_SRC
**** Window Transparency
#+BEGIN_SRC emacs-lisp
        ;; Emacs Transparency
        ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
        (set-frame-parameter (selected-frame)  'alpha '(100 100))
        ;; (set-frame-parameter (selected-frame) 'alpha '(85 50))
        (add-to-list 'default-frame-alist '(alpha 100 100))

         (eval-when-compile (require 'cl))
         (defun toggle-transparency ()
           (interactive)
           (if (/=
                (cadr (frame-parameter nil 'alpha))
                100)
               (set-frame-parameter nil 'alpha '(100 100))
             (set-frame-parameter nil 'alpha '(85 50))))
        (global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC

**** Fullscreen
#+BEGIN_SRC emacs-lisp
        (if (eq system-type 'gnu/linux)  ; GNU/Linux uses the fullscreen-mode package
         (progn 
         (use-package fullscreen-mode
         :ensure fullscreen-mode
         :bind 
         (("<f4>" . fullscreen-mode-fullscreen-toggle))
         )))
#+END_SRC
*** Modes
**** Mode hooks
I want linum mode (line numbers) enabled in these modes:
#+BEGIN_SRC emacs-lisp :tangle no
        (add-hook 'text-mode-hook 'linum-mode)
#+END_SRC

Trying auto-complete-mode in these modes:
#+BEGIN_SRC emacs-lisp :tangle no
        (add-hook 'text-mode-hook 'auto-complete-mode)
#+END_SRC
**** Version Control
***** Magit
#+BEGIN_SRC emacs-lisp
        (use-package magit
        :ensure magit
        :bind ("C-c m" . magit-status)) 
#+END_SRC
***** vc-check-status
vc-check-status reminds about uncommitted and unpushed changes when exiting Emacs.
#+BEGIN_SRC emacs-lisp
        (use-package vc-check-status
        :ensure vc-check-status
        :init 
        (progn
        (vc-check-status-activate 1))
        )
#+END_SRC
**** Twittering-mode
View Twitter timelines or send tweets using =M-x tweet=.
#+BEGIN_SRC emacs-lisp
        (use-package twittering-mode
          :ensure twittering-mode 
          :config 
          (defalias 'tweet 'twittering-update-status-interactive)
          (setq twittering-use-master-password t)
          ;; Don't show the client type in feed:
          (setq twittering-status-format "%i %s,  %@: 
        %FILL[  ]{%T %L%r%R}
         ")
          (add-hook 'twittering-mode-hook 'variable-pitch-mode)
          (setq twittering-icon-mode t)               ; Show icons
          )
#+END_SRC
*** Useful extra functions
**** Sudoedit, edit file as root
m-x sudoedit reopens the file as root. ([[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][source: emacsredux.com]])

Tip: It is also possible to do:

#+BEGIN_SRC :tangle no
    alias E="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
#+END_SRC

in your shell. 

#+BEGIN_SRC emacs-lisp
    (defun sudo-edit (&optional arg)
      "Edit currently visited file as root.

    With a prefix ARG prompt for a file to visit.
    Will also prompt for a file to visit if current
    buffer is not visiting a file."
      (interactive "P")
      (if (or arg (not buffer-file-name))
          (find-file (concat "/sudo:root@localhost:"
                             (ido-read-file-name "Find file(as root): ")))
        (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
*** Encoding
Prefer UTF-8. ([[http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html][source]])
#+BEGIN_SRC emacs-lisp
        (prefer-coding-system 'utf-8)
        (when (display-graphic-p)
          (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

*** Minibuffer
#+BEGIN_SRC emacs-lisp
        (require 'uniquify)
        (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

** Platform specific configuration
*** Windows specific settings
#+BEGIN_SRC emacs-lisp
      (if (eq system-type 'windows-nt)  ; Windows settings
       (progn 
         (setq home "c:/Users/jmn") 
         (setq default-directory "c:/Users/jmn") 
         ))
#+END_SRC

*** MacOS specific settings
**** Notes
Note: To work effectively with Emacs on Mac you might want to reconfigure a few things in MacOS, namely:
- Rebind Caps lock to function as a control key
- Free C-Space from being bound to spotlight (it's used in Emacs to mark region).
  To do this see: System Preferences > Keyboard > Keyboard Shortcuts > Spotlight. Rebind Spotlight to something else (i.e C-Option-Space).

***** Problematic keybindings / conflicts
With paredit: On Mac, C-<left arrow>/<right arrow> is already bound.

**** Configuration
#+BEGIN_SRC emacs-lisp
      (if (eq system-type 'darwin)
           (setq mac-option-modifier nil
              mac-command-modifier 'meta
              x-select-enable-clipboard t)
    (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize))
    )
#+END_SRC

Launching Emacs from Mac OS Spotlight (launchd) will not provide the same paths as if you would launch it from bash, the exec-path-from-shell package fixes this (useful for tools like leiningen and others)

** Keybindings
**** Fonts, themes et c
#+BEGIN_SRC emacs-lisp
        (global-set-key '[f12] 'variable-pitch-mode)
        (global-set-key '[f8]  '(lambda () (interactive) (auto-complete-mode)))
        (global-set-key '[f9]  '(lambda () (interactive) (load-theme 'anti-zenburn t)))
        (global-set-key '[f10] '(lambda () (interactive) (load-theme 'yellow-postits t)))
#+END_SRC

**** Global org-mode bindings
#+BEGIN_SRC emacs-lisp
    	(global-set-key (kbd "C-c c") 'org-capture)
    	(global-set-key (kbd "C-c o") 'org-capture-goto-last-stored)
    	(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

** Activity specific configuration ('cuz polycephaly)
*** Writing
**** ASCIIDoc mode (adoc-mode)
#+BEGIN_SRC emacs-lisp
        (use-package adoc-mode
        :ensure adoc-mode
        :mode "\\.asciidoc\\'"
        :config
        (add-hook 'adoc-mode-hook (lambda() (buffer-face-mode t))))
#+END_SRC

**** Visual line mode in text (and org) files
=visual-line-mode= is so much better than =auto-fill-mode=. It doesn't actually break the text into multiple lines - it only looks that way.

#+BEGIN_SRC emacs-lisp
        (remove-hook 'text-mode-hook #'turn-on-auto-fill)
        (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+END_SRC

**** Writeroom-mode
Writeroom-mode hides most UI elements.
#+BEGIN_SRC emacs-lisp
        (use-package writeroom-mode
          :ensure writeroom-mode
          )
#+END_SRC
*** org-mode: note-taking, activity management et c.
**** General org-mode buffer settings
Change the font-face so that only the last star indicating an org-mode headline is displayed. This is less resource intensive - and slightly different from -  org-indent-mode).
#+BEGIN_SRC emacs-lisp
        (setq org-hide-leading-stars 't)       
#+END_SRC
**** Inline code (org-babel)
***** Load languages
#+BEGIN_SRC emacs-lisp
        ;; Load relevant languages
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((emacs-lisp . t)
           (clojure . t)
           (go . t)))
#+END_SRC
***** Language mode specific settings
****** Clojure
Use cider as the clojure execution backend.
#+BEGIN_SRC emacs-lisp
        (setq org-babel-clojure-backend 'cider)
#+END_SRC
***** Indention and tabs, Tabs and indentation, in code blocks
#+BEGIN_SRC emacs-lisp
        ;; Let's have pretty source code blocks
        ;; FIXME:  org-src-fontify-natively t -- Problem with variable pitch fonts.
        (setq org-src-fontify-natively nil)
        (setq org-edit-src-content-indentation 4
              org-src-tab-acts-natively t
              org-confirm-babel-evaluate nil)
#+END_SRC
***** Code block expansion templates
Type <s [TAB] , <el [TAB et c to create code blocks. ([[http://kitchingroup.cheme.cmu.edu/blog/2014/01/26/Language-specific-default-headers-for-code-blocks-in-org-mode/][source]])

#+BEGIN_SRC emacs-lisp
        ;; add <p for python expansion
        (add-to-list 'org-structure-template-alist
                     '("p" "#+BEGIN_SRC python\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>"))

        ;; add <el for emacs-lisp expansion
        (add-to-list 'org-structure-template-alist
                     '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>"))
#+END_SRC

***** Evaluation
To make code blocks evaluate silently by default:

#+BEGIN_SRC emacs-lisp
        (setq org-babel-default-header-args
                  '((:results . "silent")
                        ))
#+END_SRC

**** org-capture templates
#+BEGIN_SRC emacs-lisp
        (setq org-capture-templates
           '(
             ("n" "Short note" entry (file+datetree "~/org/notes.org") 
              "" :empty-lines 1)
             ("b" "Weblog post" entry (file+datetree "~/org/notes.org") 
              "* %^{Title}\n :PROPERTIES:\n:on: %T\n:END:\n  %? %i" :empty-lines 1)
             ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
                  "* TODO %?\n  %i\n  %a"))
           )
#+END_SRC
**** Notes
My bindings for org-mode
|---------+------------------------------+-----------------------|
| binding | M-x                          | description           |
|---------+------------------------------+-----------------------|
| C-c a   | org-agenda                   | Agenda view           |
| C-c c   | org-capture-goto-last-stored | Capture via templates |
| C-c o   | org-revisit                  |                       |
|---------+------------------------------+-----------------------|
- TODO It would be neat if the above table could be used to generate
  the required emacs-lisp for the keybindings.

**** Faces
Even if I sometimes use =variable-pitch-mode= when reading org-files, I still want the tables and code blocks to use fixed pitch (monospaced fonts).

**** Monospace fonts for tables, quotes et c
#+BEGIN_SRC emacs-lisp
        (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
        (set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
        (set-face-attribute 'font-lock-builtin-face nil :inherit 'fixed-pitch)
#+END_SRC

**** Publishing from org-mode
***** Publish projects
#+BEGIN_SRC emacs-lisp
        (setq org-publish-project-alist
              (list
               `("emacs-notes"
                   :base-directory "~/git/notes/"
                   :base-extension "org"
                   :publishing-directory "~/git/jmn.github.io"
                   :recursive nil
                   :publishing-function org-html-publish-to-html
                   :include ("jmn.org" "emacs.org")
                   :exclude "\\.org$"
                   )
               `("emacs-notes-org"
                   :base-directory "~/git/notes/"
                   :base-extension "org"
                   :publishing-directory "~/git/jmn.github.io/org"
                   :recursive nil
                   :publishing-function org-org-publish-to-org
                   :include ("jmn.org" "emacs.org")
                   :exclude "\\.org$"
                   ))
              )
#+END_SRC
***** Org-jekyll
Export configuration for Juan Reyeros org-jekyll to export org subtrees to Jekyll.
The subtrees must have the tag "blog" and a property "on" with a timestamp.
****** Helper function "blogthis" to export org subtrees to jekyll via org-jekyll.
#+BEGIN_SRC emacs-lisp
        (require 'ox)
            (defun blogthis ()
              "add the necessary tags and properties to publish an org subtree"
              (interactive)
              (org-back-to-heading t)
              (org-set-tags-to "blog")
              (org-set-property "on" (format-time-string "%Y-%m-%d %H:%M" (current-time)))
              (org-jekyll-export-current-entry)
              )
#+END_SRC

****** Org-jekyll configuration
#+BEGIN_SRC emacs-lisp
        (use-package org-jekyll
        :ensure org-jekyll
        :config 

            (add-to-list 'org-publish-project-alist
                   '("jmn-org"
                     :base-directory "~/org"
                     :recursive t
                     :base-extension "org"
                     :publishing-directory "~/git/jmn.github.io/"
                     :exclude "^blog\\|^bitacora\\|jr.org"
                     :site-root "http://www.jmnorlund.net"
                     :jekyll-sanitize-permalinks t
                     :publishing-function org-html-publish-to-html
                     :section-numbers nil
                     :headline-levels 4
                     :table-of-contents t
                     :auto-index nil
                     :auto-preamble nil
                     :body-only nil
                     :auto-postamble nil))

            (add-to-list 'org-publish-project-alist
                         '("jmn" :components ("jmn-org")))
        )
#+END_SRC

****** Run jekyll after org-capture
#+BEGIN_SRC emacs-lisp :tangle no
                                                ; FIXME: This currently does not work as ork-jekyll-export-current-entry
                                                ; uses the filename to get the org project and the capture buffer has no 
                                                ; file name.
        (add-hook 'org-capture-after-finalize-hook 'org-jekyll-export-current-entry)
#+END_SRC
***** Jekyll
Function to insert a YAML front matter (at cursor point).

#+BEGIN_SRC emacs-lisp
        (defun insert-YAML-front-matter (string)
          "Insert \label{ARG} \index{\nameref{ARG}} at point"
          (interactive "sString for \\title: ")
          (insert "#+BEGIN_HTML
        ---
        layout: post
        title: " string " 
        tags: 
        ---
        ,#+END_HTML"))
#+END_SRC
***** Blogging, with org2blog
I have a wordpress.com blog and use =org2blog= to publish posts.
Authentication info is in =~/.authinfo= and follows the following form:
=machine myblog login myusername password myrealpassword=

See the[[https://github.com/punchagan/org2blog][ org2blog webpage]] for more information.

To blog I usually just use =M-x org2blog/wp-post-subtree= from an org-mode subtree.

#+BEGIN_SRC emacs-lisp :tangle no
        (unless (package-installed-p 'org2blog)  
          (package-install 'org2blog))     

        (require 'org2blog-autoloads)
        (setq org2blog/wp-blog-alist
              '(("wordpress"
                 :url "http://notatum.wordpress.com/xmlrpc.php"
                 :username "jmnoz"
                 :default-title "Hello World"
                 :default-categories ("org2blog" "emacs")
                 :tags-as-categories nil)
                        ))

        (require 'auth-source) ;; or nothing if already in the load-path

        (let (credentials)
          ;; only required if your auth file is not already in the list of auth-sources
          (add-to-list 'auth-sources "~/.authinfo")
          (setq credentials (auth-source-user-and-password "wordpress"))
          (setq org2blog/wp-blog-alist
                `(("wordpress"
                   :url "http://notatum.wordpress.com/xmlrpc.php"
                   :username ,(car credentials)
                   :password ,(cadr credentials)))))
#+END_SRC
*** Programming
**** Highlight keywords
#+BEGIN_SRC emacs-lisp
        ;; FIXME: This highlights FIXME:'s 
        (add-hook 'prog-mode-hook
                  (lambda ()
                    (font-lock-add-keywords nil
                                            '(("\\<\\(FIXME\\|TODO\\|BUG\\):" 1 font-lock-warning-face t)))))
#+END_SRC
**** Go autocomplete
Using [[https://github.com/nsf/gocode]]

#+BEGIN_SRC emacs-lisp
        (use-package auto-complete
        :ensure auto-complete)
        (use-package go-mode
        :ensure go-mode)
        (use-package go-autocomplete
        :ensure go-autocomplete)
        (require 'auto-complete-config)
        (add-hook 'go-mode-hook 'auto-complete-mode)
#+END_SRC

**** Clojure
Enable paredit-mode in clojure-mode and the cider REPL.

#+BEGIN_SRC emacs-lisp
        (use-package cider 
        :ensure t)
        (defun lisp-enable-paredit-hook () (paredit-mode 1))
        (add-hook 'clojure-mode-hook 'lisp-enable-paredit-hook)
        (add-hook 'cider-repl-mode-hook 'paredit-mode)
#+END_SRC

***** Cider configuration
#+BEGIN_SRC emacs-lisp
        (require 'cider)
        (setq nrepl-hide-special-buffers t
              cider-repl-pop-to-buffer-on-connect nil
              cider-popup-stacktraces nil
              cider-repl-popup-stacktraces t)
#+END_SRC

**** Magit - nice git interface
***** Notes, set up
To perform push/pull to remote repositories over SSH you need to configure your local key management.
****** How to configure ssh keys on MS Windows
See here:
[[https://github.com/magit/magit/wiki/FAQ#windows-cannot-push-with-ssh-passphrase]]

[[https://help.github.com/articles/working-with-ssh-key-passphrases/#auto-launching-ssh-agent-on-msysgit]]

You will need to launch git bash to get ssh-agent running before starting Emacs, then =(load-file "~/.ssh/agent.env.el")=.
#+BEGIN_SRC emacs-lisp
        (if (eq system-type 'windows-nt)  ; Windows settings
            (load-file "~/.ssh/agent.env.el")
          )
#+END_SRC
1. Install [[http://msysgit.github.io/][Git for Windows]] (msysgit)
Authentication is usually the tricky part (it can cause the git process to appear to hang on pull/push)

For HTTPS authentication see:
- [[https://gitcredentialstore.codeplex.com/]]
****** How to configure SSH keys on Mac
*** Editing
By default the C-x C-u binding for upcase-region is disabled.
#+BEGIN_SRC emacs-lisp
        (put 'upcase-region 'disabled nil)
#+END_SRC

**** Digits increment/decrement
This function can be used with =C-u= to decrement or increment by a given number.
Source: [[http://www.emacswiki.org/emacs/IncrementNumber][Emacswiki IncrementNumber]]

#+BEGIN_SRC emacs-lisp
        (defun my-increment-number-decimal (&optional arg)
          "Increment the number forward from point by 'arg'."
          (interactive "p*")
          (save-excursion
            (save-match-data
              (let (inc-by field-width answer)
                (setq inc-by (if arg arg 1))
                (skip-chars-backward "0123456789")
                (when (re-search-forward "[0-9]+" nil t)
                  (setq field-width (- (match-end 0) (match-beginning 0)))
                  (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
                  (when (< answer 0)
                    (setq answer (+ (expt 10 field-width) answer)))
                  (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                         answer)))))))

        (global-set-key (kbd "C-c i") 'my-increment-number-decimal)
#+END_SRC

*** Diffing (ediff)
**** Ediff for org-files
Running ediff on org files might cause trouble with hidden lines. This
code attempts to remedy that.  ([[http://lists.gnu.org/archive/html/emacs-orgmode/2013-04/msg00400.html][source]])

#+BEGIN_SRC emacs-lisp
        (add-hook 'ediff-prepare-buffer-hook 'f-ediff-prepare-buffer-hook-setup)
        (defun f-ediff-prepare-buffer-hook-setup ()
          ;; specific modes
          (cond ((eq major-mode 'org-mode)
                 (f-org-vis-mod-maximum))
                ;; room for more modes
                )
          ;; all modes
          (setq truncate-lines nil))
        (defun f-org-vis-mod-maximum ()
          "Visibility: Show the most possible."
          (cond
           ((eq major-mode 'org-mode)
            (visible-mode 1)  ; default 0
            (setq truncate-lines nil)  ; no `org-startup-truncated' in hook
            (setq org-hide-leading-stars t))  ; default nil
           (t
            (message "ERR: not in Org mode")
            (ding))))
#+END_SRC
*** IRC
Use =M-x erc-tls= to connect

Hide Join/part/quit messages from IRC "lurkers" (people who aren't active).
#+BEGIN_SRC emacs-lisp
        (setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
*** Jabber (XMPP)
#+BEGIN_SRC emacs-lisp
        (use-package jabber
        :ensure jabber
        :config 
        (setq jabber-invalid-certificate-servers '("jit.si"))
        )
#+END_SRC
*** Mail (gnus and Gmail)
For more info [[http://www.emacswiki.org/emacs/GnusGmail][See here]].

**** .authinfo

This is how the .authinfo should look. Note: make sure to make it readable to your user only (=chmod 0600=) i.e. using =M-x set-file-modes=.

#+BEGIN_SRC tangle: no
    machine gmail login myuser@gmail.com password mypassword
    machine imap.gmail.com login myuser@gmail.com password mypassword port 993
    machine smtp.gmail.com login myuser@gmail.com password mypassword port 587
    machine wordpress login myuser password mypassword
#+END_SRC

**** .gnus
Create a file =~/.gnus= and put in it this:

***** TODO Sending mail from windows
This is the config. I use on my Windows machine, i use the msmtp.exe program:

#+BEGIN_SRC emacs-lisp :tangle no

#+END_SRC

***** Gmail configuration

#+BEGIN_SRC emacs-lisp tangle: no
        (setq gnus-select-method
              '(nnimap "gmail"
                       (nnimap-address "imap.gmail.com")
                       (nnimap-server-port 993)
                       (nnimap-authinfo-file "~/.authinfo")
                       (nnimap-stream ssl)))
#+END_SRC

***** Sending mail from other systems (GNU/Linux...)
([[https://eschulte.github.io/emacs24-starter-kit/starter-kit-gnus.html][source]])
Add this to your =~/.gnus= to enable encrypted SMTP mail sending through GMail.

#+BEGIN_SRC emacs-lisp :tangle no
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials '(("smtp.gmail.com" 587 "your-name@gmail.com" nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587)
#+END_SRC
Send mail using C-x m.

# Emacs 25.0.50.1 (Org mode 7.9.1)
