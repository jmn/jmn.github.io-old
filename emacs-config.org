#+TITLE: jmn's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: align indent fold nodlcheck hidestars oddeven lognotestate overview
* Configuration
** About this file
Inspired by Sacha Chua's configuration. Parts of this file are directly copied from their configuration.
See http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.html
and http://dl.dropboxusercontent.com/u/3968124/sacha-emacs.org

This configuration file uses org-babel to load. Load this file using
=(org-babel-load-file "/path/to/file")=,
changing the path appropriately, but you'll probably want to tweak it
extensively first. 

Tips:
- To edit source code blocks in org-mode, hit =C-c '=
- To show syntax highligting in code blocks use =M-x org-src-fontify-buffer=

*** Configure ~/.emacs.d/init.el
To load this file when Emacs starts I put the following code into =~/.emacs.d/init.el=:

#+begin_src emacs-lisp  :tangle no
;; This sets up the load path so that we can override it
(package-initialize nil)
;; Override the packages with the git version of Org and other packages
(add-to-list 'load-path "~/git/org-mode/lisp")
(add-to-list 'load-path "~/git/org-mode/contrib/lisp")
;; Load the rest of the packages
(package-initialize t)
(setq package-enable-at-startup nil)
(require 'org)
(require 'ob-tangle)
(org-babel-load-file (expand-file-name "~/git/notes/jmn.org"))
#+end_src
** Personal information
#+begin_src emacs-lisp
  (setq user-full-name "jmn"
        user-mail-address "norlund@gmail.com")
#+end_src

** Emacs initialization
*** Install packages if necessary
ELPA makes it easy to install packages without tracking down all the
different websites. Let's define a function that makes it easy to
install packages.

#+begin_src emacs-lisp
;; FIXME: On some versions of Emacs 24.4 this function is strangely broken.
(defun jmn/package-install (package &optional repository)
  "Install PACKAGE if it has not yet been installed.
If REPOSITORY is specified, use that."
  (unless (package-installed-p package)
    (let ((package-archives (if repository
                                (list (assoc repository package-archives))
                              package-archives)))
    (package-install package))))
#+end_src

*** Add my elisp directory and other files
#+begin_src emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/elisp")
 (add-to-list 'load-path "~/elisp")
; (load-file "~/.emacs.secrets")        ; Contains private information
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)
#+end_src

*** Paths
#+BEGIN_SRC emacs-lisp
 (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

*** Inhibit startup message
#+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-buffer-menu t)
 (setq inhibit-startup-echo-area-message nil)
 (setq inhibit-startup-screen t)
 (setq initial-scratch-message ";; Scratch buffer 
")
#+END_SRC

*** Start the edit server
For use with "emacsclient".

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
** General configuration
*** Appearance
**** Theme
Good themes (dark): tango-dark, monokai, solarized-dark, heroku, minimal (no colors), monochrome (same, misterioso).
light themes: solarized-light, anti-zenburn

#+BEGIN_SRC emacs-lisp
(setq monokai-use-variable-pitch nil)
(setq visible-bell 1)                   ; Disables the audible bell.
#+END_SRC

**** Line numbers
#+BEGIN_SRC emacs-lisp
(setq linum-format " %4d   ")
#+END_SRC

**** Fonts
The default font is used for most faces. Sometimes I want to use a
serif font non-monospace font such as Times New roman or Gotham HTF
and other times I prefer a monospace font such as Consolas (Windows),
Monaco (Mac) or Dejavu Sans (GNU/Linux).

Reminder (to self): To experiment with font selection, use the menu then the =C-u C-x == command to 
find the name of the font used.

I use a non-monospace font as the default and use
variable-pitch-mode when I want a monospaced font which seems kind of
reverse - but it works. I even bind a key (F12) to switch between the two settings. It's great.

Other faces, besides "default"  which you might want to set fonts for are: "fixed-pitch" and "linum".

#+BEGIN_SRC emacs-lisp
(require 'cl)
  (defun font-candidate (&rest fonts)
     "Return existing font which first match."
     (find-if (lambda (f) (find-font (font-spec :name f))) fonts))
#+END_SRC

Choose which block to tangle depending on font preference. See also
the variable-pitch-mode for when you want to default to monospace but
sometimes toggle to use "variable pitch".

Alternative serif fonts on Windows: Cambria, Times New Roman, Gotham HTF Light (?)
#+BEGIN_SRC emacs-lisp 
(when window-system
(set-face-attribute 'default nil :font (font-candidate '"Times New Roman-14:weight=normal:height:120" "Liberation Serif-12" "FreeSerif-14" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
(when window-system
(set-face-attribute 'default nil :font (font-candidate '"Consolas-14:weight=normal:height=160" "DejaVu Sans Mono-11:weight=normal"))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when window-system
(set-face-attribute 'variable-pitch nil :font (font-candidate '"Consolas-14:weight=normal:height=160" "DejaVu Sans Mono-10:weight=normal"))
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (set-face-attribute 'linum nil :font (font-candidate '"Cambria-14" "Times New Roman-14:weight=normal:height:120" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
;; (set-face-attribute 'linum nil :font (font-candidate ' "Times New Roman-14:weight=normal:height:120" "DejaVu Sans Mono-10:weight=normal" "Gill Sans-14"))
#+END_SRC

*** Backups
This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src
*** Window configuration
**** Toolbars, menus et c
#+BEGIN_SRC emacs-lisp
(when window-system
  (tooltip-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (set-fringe-mode 0)
)

#+END_SRC
**** Window Transparency
#+BEGIN_SRC emacs-lisp
;; Emacs Transparency
;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
(set-frame-parameter (selected-frame)  'alpha '(100 100))
;; (set-frame-parameter (selected-frame) 'alpha '(85 50))
(add-to-list 'default-frame-alist '(alpha 100 100))

 (eval-when-compile (require 'cl))
 (defun toggle-transparency ()
   (interactive)
   (if (/=
        (cadr (frame-parameter nil 'alpha))
        100)
       (set-frame-parameter nil 'alpha '(100 100))
     (set-frame-parameter nil 'alpha '(85 50))))
(global-set-key (kbd "C-c t") 'toggle-transparency)


#+END_SRC

**** Fullscreen
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'gnu/linux)  ; GNU/Linux uses the fullscreen-mode package
   (progn 
   (use-package fullscreen-mode
   :ensure fullscreen-mode
   :bind 
   (("<f4>" . fullscreen-mode-fullscreen-toggle))
   )))
    #+END_SRC
*** Modes
**** Mode hooks
I want linum mode (line numbers) enabled in these modes:
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'linum-mode)
#+END_SRC

Trying auto-complete-mode in these modes:
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'text-mode-hook 'auto-complete-mode)
#+END_SRC
**** Version Control
***** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure magit
:bind ("C-c m" . magit-status)) 
#+END_SRC
***** vc-check-status
vc-check-status reminds about uncommitted and unpushed changes when exiting Emacs.
#+BEGIN_SRC emacs-lisp
(use-package vc-check-status
:ensure vc-check-status
:init 
(progn
(vc-check-status-activate 1))
)
#+END_SRC
**** Twittering-mode
Send tweets using =M-x tweet=.
#+BEGIN_SRC emacs-lisp
    (use-package twittering-mode
    :ensure twittering-mode 
    :config 
    (defalias 'tweet 'twittering-update-status-interactive)
    )
#+END_SRC
*** Useful extra functions
**** Sudoedit, edit file as root
m-x sudoedit reopens the file as root. ([[http://emacsredux.com/blog/2013/04/21/edit-files-as-root/][source: emacsredux.com]])

Tip: It is also possible to do:
alias E="SUDO_EDITOR=\"emacsclient -t -a emacs\" sudoedit"
in your shell. 

#+BEGIN_SRC emacs-lisp
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC
*** Minibuffer
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+END_SRC

** Platform specific configuration
*** Windows specific settings
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)  ; Windows settings
   (progn 
     (setq home "c:/Users/jmn") 
     (setq default-directory "c:/Users/jmn") 
     ))
#+END_SRC

*** MacOS specific settings
**** Notes
Note: To work effectively with Emacs on Mac you might want to reconfigure a few things in MacOS, namely:
- Rebind Caps lock to function as a control key
- Free C-Space from being bound to spotlight (it's used in Emacs to mark region).
  To do this see: System Preferences > Keyboard > Keyboard Shortcuts > Spotlight. Rebind Spotlight to something else (i.e C-Option-Space).

***** Problematic keybindings / conflicts
With paredit: On Mac, C-<left arrow>/<right arrow> is already bound.

**** Configuration
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
       (setq mac-option-modifier nil
          mac-command-modifier 'meta
          x-select-enable-clipboard t)
(when (memq window-system '(mac ns))
;; TODO: (jmn-package-install 'exec-path-from-shell)
(exec-path-from-shell-initialize))
)
#+END_SRC

Launching Emacs from Mac OS Spotlight (launchd) will not provide the same paths as if you would launch it from bash, the exec-path-from-shell package fixes this (useful for tools like leiningen and others)

** Keybindings
**** Fonts, themes et c
#+begin_src emacs-lisp
    (global-set-key '[f12] 'variable-pitch-mode)
    (global-set-key '[f8] '(lambda () (interactive) (auto-complete-mode)))
    (global-set-key '[f9] '(lambda () (interactive) (load-theme 'anti-zenburn t)))
    (global-set-key '[f10] '(lambda () (interactive) (load-theme 'yellow-postits t)))
    #+end_src

**** Global org-mode bindings
#+BEGIN_SRC emacs-lisp
	(global-set-key (kbd "C-c c") 'org-capture)
	(global-set-key (kbd "C-c o") 'org-capture-goto-last-stored)
	(global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

** Activity specific configuration ('cuz polycephaly)
*** Writing
**** ASCIIDoc mode (adoc-mode)
#+BEGIN_SRC emacs-lisp
(use-package adoc-mode
:ensure adoc-mode
:mode "\\.asciidoc\\'"
:config
(add-hook 'adoc-mode-hook (lambda() (buffer-face-mode t))))
#+END_SRC

**** Visual line mode in text (and org) files
=visual-line-mode= is so much better than =auto-fill-mode=. It doesn't actually break the text into multiple lines - it only looks that way.

#+begin_src emacs-lisp
(remove-hook 'text-mode-hook #'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)
#+end_src

*** Note-taking, activity management with org-mode 
**** Inline code (org-babel)
#+BEGIN_SRC emacs-lisp
;; Load relevant languages
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (clojure . t)
   (go . t)))

;; Use cider as the clojure execution backend
(setq org-babel-clojure-backend 'cider)

;; Let's have pretty source code blocks
;; FIXME       org-src-fontify-natively t
(setq org-edit-src-content-indentation 4
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil)

#+END_SRC

To make code blocks evaluate silently by default:

#+BEGIN_SRC emacs-lisp
 (setq org-babel-default-header-args
           '((:results . "silent")
                 ))
#+END_SRC

**** org-capture templates
#+BEGIN_SRC emacs-lisp
   (setq org-capture-templates
      '(("n" "Short note" entry (file+datetree "~/org/notes.org") "")
        ("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
             "* TODO %?\n  %i\n  %a")))

#+END_SRC
**** Notes
My bindings for org-mode
|---------+------------------------------+-----------------------|
| binding | M-x                          | description           |
|---------+------------------------------+-----------------------|
| C-c a   | org-agenda                   | Agenda view           |
| C-c c   | org-capture-goto-last-stored | Capture via templates |
| C-c o   | org-revisit                  |                       |
|---------+------------------------------+-----------------------|
- TODO It would be neat if the above table could be used to generate
  the required emacs-lisp for the keybindings.

**** Faces
Even if I sometimes use =variable-pitch-mode= when reading org-files, I still want the tables and code blocks to use fixed pitch (monospaced fonts).

**** Monospace fonts for tables, quotes et c
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
(set-face-attribute 'org-code nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block nil :inherit 'fixed-pitch)
(set-face-attribute 'org-verbatim nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block-begin-line nil :inherit 'fixed-pitch)
(set-face-attribute 'org-block-end-line nil :inherit 'fixed-pitch)
(set-face-attribute 'font-lock-builtin-face nil :inherit 'fixed-pitch)
#+END_SRC

**** Publishing from org-mode
***** Jekyll
Function to insert a YAML front matter (at cursor point).

#+BEGIN_SRC emacs-lisp
(defun insert-YAML-front-matter (string)
  "Insert \label{ARG} \index{\nameref{ARG}} at point"
  (interactive "sString for \\title: ")
  (insert "#+BEGIN_HTML
---
layout: post
title: " string " 
tags: 
---
#+END_HTML"))

#+END_SRC
***** Blogging, with org2blog
I have a wordpress.com blog and use =org2blog= to publish posts.
Authentication info is in =~/.authinfo= and follows the following form:
=machine myblog login myusername password myrealpassword=

See the[[https://github.com/punchagan/org2blog][ org2blog webpage]] for more information.

To blog I usually just use =M-x org2blog/wp-post-subtree= from an org-mode subtree.

#+BEGIN_SRC emacs-lisp :tangle no
(unless (package-installed-p 'org2blog)  
  (package-install 'org2blog))     

(require 'org2blog-autoloads)
(setq org2blog/wp-blog-alist
      '(("wordpress"
         :url "http://notatum.wordpress.com/xmlrpc.php"
         :username "jmnoz"
         :default-title "Hello World"
         :default-categories ("org2blog" "emacs")
         :tags-as-categories nil)
		))

(require 'auth-source) ;; or nothing if already in the load-path

(let (credentials)
  ;; only required if your auth file is not already in the list of auth-sources
  (add-to-list 'auth-sources "~/.authinfo")
  (setq credentials (auth-source-user-and-password "wordpress"))
  (setq org2blog/wp-blog-alist
        `(("wordpress"
           :url "http://notatum.wordpress.com/xmlrpc.php"
           :username ,(car credentials)
           :password ,(cadr credentials)))))

#+END_SRC
*** Programming 
**** Go autocomplete
Using https://github.com/nsf/gocode

#+BEGIN_SRC emacs-lisp
(use-package auto-complete
:ensure auto-complete)
(use-package go-mode
:ensure go-mode)
(use-package go-autocomplete
:ensure go-autocomplete)
(require 'auto-complete-config)
(add-hook 'go-mode-hook 'auto-complete-mode)
#+END_SRC

**** Clojure
Enable paredit-mode in clojure-mode and the cider REPL.

#+BEGIN_SRC emacs-lisp
(use-package cider 
:ensure t)
(defun lisp-enable-paredit-hook () (paredit-mode 1))
(add-hook 'clojure-mode-hook 'lisp-enable-paredit-hook)
(add-hook 'cider-repl-mode-hook 'paredit-mode)
#+END_SRC

***** Cider configuration
#+BEGIN_SRC emacs-lisp
(require 'cider)
(setq nrepl-hide-special-buffers t
      cider-repl-pop-to-buffer-on-connect nil
      cider-popup-stacktraces nil
      cider-repl-popup-stacktraces t)
#+END_SRC

**** Magit - nice git interface
***** Notes, set up
To perform push/pull to remote repositories over SSH you need to configure your local key management.
****** How to configure ssh keys on MS Windows
See here:
https://github.com/magit/magit/wiki/FAQ#windows-cannot-push-with-ssh-passphrase

https://help.github.com/articles/working-with-ssh-key-passphrases/#auto-launching-ssh-agent-on-msysgit

You will need to launch git bash to get ssh-agent running before starting Emacs, then =(load-file "~/.ssh/agent.env.el")=.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)  ; Windows settings
    (load-file "~/.ssh/agent.env.el")
  )
#+END_SRC
1. Install [[http://msysgit.github.io/][Git for Windows]] (msysgit)
Authentication is usually the tricky part (it can cause the git process to appear to hang on pull/push)

For HTTPS authentication see:
- https://gitcredentialstore.codeplex.com/
****** How to configure SSH keys on Mac
***** General configuration

#+begin_src emacs-lisp
;; (jmn/package-install 'magit)                 ; FIXME: Function currently broken.
#+end_src
*** Editing
By default the C-x C-u binding for upcase-region is disabled.
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

**** Digits increment/decrement
This function can be used with =C-u= to decrement or increment by a given number.
Source: [[http://www.emacswiki.org/emacs/IncrementNumber][Emacswiki IncrementNumber]]

#+BEGIN_SRC emacs-lisp
(defun my-increment-number-decimal (&optional arg)
  "Increment the number forward from point by 'arg'."
  (interactive "p*")
  (save-excursion
    (save-match-data
      (let (inc-by field-width answer)
        (setq inc-by (if arg arg 1))
        (skip-chars-backward "0123456789")
        (when (re-search-forward "[0-9]+" nil t)
          (setq field-width (- (match-end 0) (match-beginning 0)))
          (setq answer (+ (string-to-number (match-string 0) 10) inc-by))
          (when (< answer 0)
            (setq answer (+ (expt 10 field-width) answer)))
          (replace-match (format (concat "%0" (int-to-string field-width) "d")
                                 answer)))))))

(global-set-key (kbd "C-c i") 'my-increment-number-decimal)
#+END_SRC

*** Diffing (ediff)
**** Ediff for org-files
Running ediff on org files might cause trouble with hidden lines. This
code attempts to remedy that.  ([[http://lists.gnu.org/archive/html/emacs-orgmode/2013-04/msg00400.html][source]])

#+BEGIN_SRC emacs-lisp
  (add-hook 'ediff-prepare-buffer-hook 'f-ediff-prepare-buffer-hook-setup)
  (defun f-ediff-prepare-buffer-hook-setup ()
    ;; specific modes
    (cond ((eq major-mode 'org-mode)
           (f-org-vis-mod-maximum))
          ;; room for more modes
          )
    ;; all modes
    (setq truncate-lines nil))
  (defun f-org-vis-mod-maximum ()
    "Visibility: Show the most possible."
    (cond
     ((eq major-mode 'org-mode)
      (visible-mode 1)  ; default 0
      (setq truncate-lines nil)  ; no `org-startup-truncated' in hook
      (setq org-hide-leading-stars t))  ; default nil
     (t
      (message "ERR: not in Org mode")
      (ding))))

#+END_SRC
*** IRC
Hide Join/part/quit messages from IRC "lurkers" (people who aren't active).
#+BEGIN_SRC 
(setq erc-lurker-hide-list '("JOIN" "PART" "QUIT"))
#+END_SRC
*** Jabber (XMPP)
#+BEGIN_SRC emacs-lisp
(use-package jabber
:ensure jabber
:config 
(setq jabber-invalid-certificate-servers '("jit.si"))
)
#+END_SRC
