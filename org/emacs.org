# Created 2015-04-11 lör 20:41
#+OPTIONS: toc:nil
#+TITLE: Emacs notes, @jmn 2013-2014
#+AUTHOR: jmn
#+STARTUP: indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.jmnorlund.net/css/base.css" />

#+BEGIN_ABSTRACT
I use Emacs for editing text under version control. Sometimes I also use it for communication such as IRC and e-mail. This is my archive of notes for the editor. This is a complement to [[/jmn][my literate Emacs configuration]].  

For information about how I maintain and publish this file, see section [[About this file]] .- /jmn, December 2014./
#+END_ABSTRACT
#+TOC: headlines 3

* Configure
Emacs provides a system called =M-x customize= which enables configuration using menus. It can be useful for easily finding which options are available. To get a more sustainable configuration which can be used on multiple systems it is generally better to use other means of configuration. 

See [[file:jmn.org]] to see how I use the org-mode format to maintain my Emacs configuration.

** Changing variables on the fly
Hit M-: to run "eval-expression".
To for example change the tab-width of the buffer, enter:
                (setq tab-width 8)
and hit RET.
* Appearance
** My current configuration <2014-12-06 lör>
- I currently use a serif font as my default emacs "face". I use Times New Roman. For colors I use the dark "tango-dark" theme. <2014-12-06 lör>
- When I feel like using less colour I use the theme "monochrome".
** Fonts and faces (Typography)
*** The default font
It is possible to use M-x customize-face, default
Personally I like to use the Consolas font on Windows.
It is possible to set the font in buffer-face-mode using =S-Leftclick=, "Change buffer font". To find out more about the face, use =M-x what-cursors-position=, or =Cu C-x ==.

#+BEGIN_SRC emacs-lisp
    (custom-set-faces
     '(default ((t (:family "Consolas" :foundry "outline" :slant normal :weight normal :height 108 :width normal))))
     '(variable-pitch ((t (:slant normal :weight light :foundry "outline" :family "Gotham HTF Light")))))
#+END_SRC
*** Buffer-face-mode / variable-pitch-mode
For reading longer texts in Emacs it might be nice to, temporarily, use a different font, for this use buffer-face-mode.
=M-x buffer-face-mode= 
#+BEGIN_SRC emacs-lisp
    (setq buffer-face-mode-face '(:family "DejaVu Sans" :height 100 :width semi-condensed))
    (setq buffer-face-mode-face '(:family "Gotham HTF Light" :foundry "outline" :slant normal :weight light :height 113 :width normal))
    (set-face-attribute 'variable-pitch nil :family "Gotham HTF Light" :foundry "outline" :slant "normal" :weight "light" :height 113 :width "normal")
#+END_SRC

You might want to configure certain modes to automatically start in variable-pitch-mode using a mode-hook, e.g:
#+BEGIN_SRC emacs-lisp
    (add-hook 'markdown-mode-hook (lambda () (variable-pitch-mode t))
#+END_SRC

**** Using variable-pitch in org-mode
You might want tables in org-mode to still use a monospaced font (fixed-pitch):
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
#+END_SRC

For code-blocks:
#+BEGIN_SRC emacs-lisp
    (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-block-background nil :inherit 'fixed-pitch)
#+END_SRC

*** Figuring out font names
One option is to use the menu bar, Options/set default font, Options/Save options and look at the result in =~/.emacs=. Another is to use =M-x what-cursors-position, or =C-u C-x ==

** Fullscreen mode on Windows
Starting with version (=M-x version=) 24.4 Emacs supports fullscreen mode on MS Windows, use =M-x toggle-frame-fullscreen= to toggle fullsceren mode, it's bound to the key =F11=.
** Create your own colour theme
I usually start off with a basic theme that I like and then do: M-x
customize-create-theme to create my own version of the
theme. Generally I do this to reduce the amount of colours used.  See
[[http://batsov.com/articles/2012/02/19/color-theming-in-emacs-reloaded/]] for more info.

Preview and find color themes:
[[http://emacsthemes.caisah.info/]]
* Operations
** Operations on words (transformations)
Uppercase word: M-c
Lowercase word: M-l
** the help system
|-------+------------------------------|
| C-h b | show all keybindings         |
| C-h m | Show major mode key bindings |
| C-h f | explain a function           |
| C-h i | open Info                    |
|-------+------------------------------|
*** finding the name of an elisp function used in a menu
C-h c (then use a menu)
** Navigating
*** Marking and Jumping
`C-c %'
     Push the current position onto the mark ring, to be able to return
     easily. Commands following an internal link do this automatically.

`C-c &'
     Jump back to a recorded position.  A position is recorded by the
     commands following internal links, and by `C-c %'.  Using this
     command several times in direct succession moves through a ring of
     previously recorded positions.
M-z <character>, M-x zap-to-char kills text forward up to and including the given character. Useful i.e. in expressions. See [[http://superuser.com/questions/124246/emacs-equivalent-to-vim-ci]]
C-M-k kill balanced expression.

*** Handling files
|---------------------+---------+--------------------------------------------------------|
| dired-mode          | C-x d   | File explorer                                          |
| dired-jump          | C-x C-j | Open dired with cursor on the file displayed in buffer |
| find-alternate-file | C-x C-v | Displays the filename so you can yank it.              |
| revert-buffer       |         | asd                                                    |
|---------------------+---------+--------------------------------------------------------|

*** Opening files via HTTP, SSH
To open a file via HTTP(S) in Emacs, use =M-x browse-url-emacs=

Emacs can edit files over SSH using the package "tramp". 

*** Searching
**** Searching and replacing within files
|---------------|
| query-replace |
|---------------|

**** Tricks, Quoted-insert et c.
By pressing C-q C-m RET You can search for "Carriage return" (C-q is "quoted-insert).

(Carriage return is displayed in Emacs as ^M "^Hello" and can show up when you
are switching between various character encodings (dos,unix,utf-8...)
line endings.)

See more here: [[http://ergoemacs.org/emacs/emacs_line_ending_char.html]]

**** Searching across files
**** TODO file contents (grep) across many files

commands: rgrep, grep-find, grep
BUG?: Searching in "Lokala inställningar crashes" with:
local characters no such directory found via cdpath rgrep

TODO: find code for mouse-appearance-menu to bind keys for "increase
buffer text size" and "decrease..." to C-Plus, C-Minus)

TODO: find the emacsclient extension in the chrome data
dir. lokala../appdata et c.

**** replacing across files. Press Q in dired-mode. Enter regex.
**** C-x C-q in dired is extremely powerful when combined with macros (imagine changing names of some files in a large directory, but instead of having to code some script, just use the macro magic!).

**** [[http://denverdroid.blogspot.se/2011/07/cool-things-to-do-in-emacs-dired-mode.html][More dired-mode stuff]]

*** Accessibility
goto-adress-mode makes written hyperlinks clickable.
see [[http://stackoverflow.com/questions/3748673/emacs-23-on-os-x-how-to-open-web-links-from-emacs][here]].

Try adding:
#+BEGIN_SRC emacs-lisp
    (add-hook 'find-file-hook 'goto-address-mode)
#+END_SRC
To your dot-emacs.
*** Bookmarks
[[http://emacswiki.org/emacs/BookMarks][Emacs Bookmarks - EmacsWiki]]

|--------------+-----------------+---------------------------------------------------------|
| Shortcut key | M-x command     | Description                                             |
|--------------+-----------------+---------------------------------------------------------|
| C-x r m      |                 | set a bookmark at the current location (e.g. in a file) |
| C-x r b      |                 | jump to a bookmark                                      |
| C-x r l      |                 | list your bookmarks                                     |
|              | bookmark-delete | delete a bookmark by name                               |
|--------------+-----------------+---------------------------------------------------------|
** Undoing, et c
C-x u (or just "u" in viper) to undo.
M-x undo-only to "undo only" (not redo).
Tip: undo-tree (package) can be very useful.

** Inserting special characters
This can be done in various ways
- Using a compose key
- using M-x ucs-insert (C-x 8 RET)
C-x 8 can also be used to insert various characters, e.g:
| C-x 8 c | ¢ |
| ...   m | µ |
| ...   o | ° |
| ...   u | µ |
| S       | § |
- using abbrevs
- using agda
[[http://wiki.portal.chalmers.se/agda/agda.php?n=Docs.UnicodeInput]]
*** References
[[http://emacs-fu.blogspot.se/2012/02/special-characters.html]]
** Spelling
Note: There are various spelling engines. aspell and hunspell are two.
Hunspell is said to be more advanced, handles utf-8 and complex grammar structures (?) used in i.e. swedish.

M-x ispell
M-x ispell-change-dictionary

*** Questions
Mixed language content? i.e. Swedish/English.
** Troubleshooting, profiling & debugging
Use =M-x toggle-debug-on-error= to enable debugging for errors.

GNU Emacs 24 and later has got profile.el
#+BEGIN_SRC emacs-lisp
    (require 'profiler)
#+END_SRC

|---------------------|
| M-x profiler-start  |
| M-x profiler-report |
|---------------------|
** Version control
*** Magit
See package magit for a great git/emacs tool.

*** Conflict resolution
M-x vc-resolve-conflicts - opens three buffer windows, A (your file),
                               B (the conflicting file from the
                               repository) and C (the combined file)
                               See "?" for commands, but use keys a/b/
                               to pick either of the versions and then
                               press space to visit the next merge
                               conflict.

*** File history
M-x vc-annotate - Creates a log of who did what when.

*** View Difference at various stages in history.
M-x vc-ediff - Highlight and navigate between difference between the
file at it's current stage and previous commits (for example).
** E-mail using gnus
*** On Windows with GMail
See [[http://www.emacswiki.org/emacs/AlessandroPiras#toc]]
** IRC
See =M-x erc=

* Extensions and modes
** Shell
Enter by typing M-x shell

To clear the shell buffer, you can use M-x erase-buffer
** Org-mode - the organizer
Org mode good for things like managing todo information, capturing
notes, keeping a journal, clocking in time and more.

*** Running the latest version
See [[http://orgmode.org/worg/org-faq.html#keeping-current-with-Org-mode-development]]

Org-mode is under active development, here are instructions to running the latest version from Git.
Basic steps: clone the repo, make autoloads, load files properly.

**** Make autoloads under MS Windows
**** Generating autoloads and Compiling Org without make
#+INDEX: Compilation!without make

Compilation is optional, but you _must_ update the autoloads file
each time you update org, even when you run org uncompiled!

Starting with Org 7.9 you'll find functions for creating the
autoload files and do byte-compilation in =mk/org-fixup.el=.  When
you execute the commands below, your current directory must be where
org has been unpacked into, in other words the file =README= should
be found in your current directory and the directories =lisp= and
=etc= should be subdirectories of it.  The command =emacs= should be
found in your =PATH= and start the Emacs version you are using.  To
make just the autoloads file do:
: emacs -batch -Q -L lisp -l ../mk/org-fixup -f org-make-autoloads
To make the autoloads file and byte-compile org:
: emacs -batch -Q -L lisp -l ../mk/org-fixup -f org-make-autoloads-compile
To make the autoloads file and byte-compile all of org again:
: emacs -batch -Q -L lisp -l ../mk/org-fixup -f org-make-autoloads-compile-force
If you are not using Git, you'll have to make fake version strings
first if =org-version.el= is not already available (if it is, you
could also edit the version strings there).
: emacs -batch -Q -L lisp -l ../mk/org-fixup \
: --eval '(let ((org-fake-release "7.9.1")(org-fake-git-version "7.9.1-fake"))\
: (org-make-autoloads))'
The above assumes a
POSIX shell for its quoting.  Windows =CMD.exe= has quite different
quoting rules and this won't work, so your other option is to start
Emacs like this
: emacs -Q -L lisp -l ../mk/org-fixup
then paste the following into the =*scratch*= buffer
#+BEGIN_SRC emacs-lisp
      (let ((org-fake-release     "7.9.1")
            (org-fake-git-version "7.9.1-fake"))
        (org-make-autoloads))
#+END_SRC
position the cursor after the closing paren and press =C-j= or =C-x
  C-e= to evaluate the form.  Of course you can replace
=org-make-autoloads= with =org-make-autoloads-compile= or even
=org-make-autoloads-compile-force= if you wish with both variants.

**** Reload Org

#+INDEX: Initialization!Reload

As of Org version 6.23b (released Sunday Feb 22, 2009) there is a new
function to reload org files.

Normally you want to use the compiled files since they are faster.
If you update your org files you can easily reload them with

: M-x org-reload

If you run into a bug and want to generate a useful backtrace you can
reload the source files instead of the compiled files with

: C-u M-x org-reload

and turn on the "Enter Debugger On Error" option.  Redo the action
that generates the error and cut and paste the resulting backtrace.
To switch back to the compiled version just reload again with

: M-x org-reload

*** Mark-up
[[http://orgmode.org/org.html#Emphasis-and-monospace]]

=code= +strikethrough+ *bold* /italic/ _underlined_ ~verbatim~

#+BEGIN_SRC org-mode
    =code= +strikethrough+ *bold* /italic/ _underlined_ ~verbatim~ 
#+END_SRC

Subscript_i Subscript_{i} (equivalent) Superscript~x Superscript~{x} (equivalent)

#+BEGIN_SRC
    Subscript_i Subscript_{i} (equivalent) Superscript^x Superscript^{x} (equivalent)
#+END_SRC

- More about Subscript and superscript: 
  [[http://orgmode.org/manual/Subscripts-and-superscripts.html#Subscripts-and-superscripts]]
**** Conundrum
What is up with org-mode created superscripts i.e:
="^Hello"= exports to ="<sup>Hello</sup>"= (Even when contained within equal signs. Bug?)
#+BEGIN_SRC
    ="^Hello"= exports to ="<sup>Hello</sup>"= (Even when contained within equal signs. Bug?)
#+END_SRC

Further more, HTML in a SRC code block will not be escaped properly.

#+BEGIN_SRC html
    <sup>Hello</sup>
    =<sup>Hello</sup>=
    ="<sup>Hello</sup>"=
#+END_SRC

FIXME: BUG?

*** Code in org files
To input code insert "<s" on a line and press tab. See [[http://orgmode.org/manual/Easy-Templates.html#Easy-Templates][Easy Templates]]
*** Inserting dates and times
|-------+-----+------------------|
| key   | M-x | description      |
|-------+-----+------------------|
| C-c . |     | insert timestamp |
|-------+-----+------------------|
*** Personal keybindings
|-------+------------------|
| C-c c | capture new item |
| C-c a | org-agenda       |
| C-c , | set priority     |
|-------+------------------|
*** Various

Link format \[[http...]\[foo]] (without slashes)
Example: [[http://localhost][localhost]]
Use C-c C-l with the cursor above the link to modify it.
Or, backspace after the description to remove the final bracket and unhide the URL.
See [[http://orgmode.org/manual/Link-format.html#Link-format][Documentation on links]]

*** Scheduling time
To schedule a task, use C-c C-s.
| C-c C-x ; | Start a countdown timer (just ";" in agenda views). |
**** Repeated tasks (recurring tasks)
To schedule a recurring task (or "repeated task", see info org-mode 8.3.2):
     DEADLINE: <2005-10-01 lör +1m>

Note the "+1m", that means to repeat every month.

You can use yearly, monthly, weekly, daily and hourly repeat cookies
by using the `y/w/m/d/h' letters.

If you need both a repeater and a special warning period in a deadline entry,
the repeater should come first and the warning period last: `DEADLINE:
<2005-10-01 lör +1m -3d>'.

*** Agenda
|------------------------------------+---------|
| Schedule on date                   | C-c C-s |
| Change status (started, done, etc) | C-c C-t |
| Deadline                           | C-c C-d |
| kill item                          | C-k     |
|------------------------------------+---------|

*** Agenda view
The default key for opening agenda mode (M-x org-agenda) is =C-c C-a= followed by a
command key. Pressing "a" will open the agenda for day or week
(depending on the value of the variable =org-agenda-span=).

One simple way of effectively using org agenda is this:
- Capture TODO items using org capture
- When planning the work ahead of you, open the list of stored TODO
  items.
- Use =C-c C-s= to schedule the item. Just hit RET to schedule it
  for today.
- Open org-agenda-goto-today by pressing =C-c a a=

*** Importing ICS icalendar files

Emacs can import icalendar files to the diary using M-x icalendar-...
Org can then be set to read the diary files using:
#+BEGIN_SRC emacs-lisp
      (setq org-agenda-include-diary t)
#+END_SRC

*** Capture
|---------+--------------------------+------------------------------|
| C-c C-l | insert link              |                              |
| C-c C-a | insert attachment        |                              |
|         | open last stored capture | org-capture-goto-last-stored |
|---------+--------------------------+------------------------------|
*** Archiving
|-------------+-----------------------------+-------------------|
| C-c C-x C-a | org-archive-subtree-default | archives the item |
|-------------+-----------------------------+-------------------|

*** Searching and filtering in org
C-c / Use org-sparse-tree to filter out only matching headings.
i.e: "C-c / m blog" to show only headings containing the tag "blog"
*** Literate programming using org-babel

Insert code blocks:
#+BEGIN_SRC emacs-Lisp
    (foo)
#+END_SRC

Useful org-babel keybindings:
|-----------+------------------------+-------------------------------------------------------|
| key       | action                 | description                                           |
|-----------+------------------------+-------------------------------------------------------|
| C-c C-v t | org-tangle             |                                                       |
| C-c C-c   |                        | Evalute code block                                    |
| C-c '     |                        | Edit code block in separate buffer                    |
|           | org-src-fontify-block  | Applies syntax highlighting (font lock) to code block |
|           | org-src-fontify-buffer | (As above) to all code blocks in the buffer.          |
|-----------+------------------------+-------------------------------------------------------|

To easily create new code blocks, insert "<s" and hit "Tab" and a code
block will be created.
*** Exporting to HTML and other formats
C-c C-e opens the export menu (or "dispatcher").

More export configuration options can be found under: M-x customize-group org-export

**** Export with Table of contents configuration
Table of contents can be created with a configured to include all
levels of heading or just to a specified level.

M-x customize-variable org-export-with-toc

**** Export with heading numbering
M-x customize-variable org-export-with-section-numbers 

**** TODO Room for improvement
In my opinion, there is room to improve the Org export dispatch menu to
allow for:
- Configration of ToC (Table of contents) (whether it should be created or not, level of detail et c.)
- Whether or not headings should be rendered with numbers alongside them.
*** Editing math and special characters
First install packages auctex and cdlatex

Enable M-x org-cdlatex-mode

- see here: [[http://orgmode.org/manual/CDLaTeX-mode.html]]
*** Further study
[[[[http://orgmode.org/worg/doc.html][All]] hooks, commands and options of Org 8.0]
** Miscellaneous (git, magit, org-mode, gnus, diff ...)
*** Acceptable visual configurations
Dark: color-theme-dark-blue2, fringe-mode,
Font: Consolas 10, Dejavu Sans Mono 10
C-x C-+, C-x C-- - increase, decrease text size
*** Text zoom, default is C-x C-+, C-x C-- to resize text.

*** Magit for git version control
[[http://philjackson.github.com/magit/magit.html][Magit manual]]

magit-status will show the state of the repository

**** Useful magit-status keys and commands:
|---------+-------------------------------------|
| S-Tab   | toggle showing diff in place        |
| d       | Show a diff                         |
| e       | show ediff                          |
| c       | commit                              |
| s       | stage (and add files)               |
| v       | discard change                      |
| g       | refresh                             |
| C-u s   | stage all untracked files           |
| C-c C-c | commit (from change message buffer) |
| l       | show history                        |
|---------+-------------------------------------|
**** the log
pressing l opens the log
. - mark
= - compare the marked commit and the current (under cursor )commit
C-w - copy sha1 of commit into the kill ring

**** C-u commands:
C-u i, ask for filename to ignore (useful for directories)

**** mx-commands:
magit-ediff
*** Reading feeds with gnus
press G R to add a new feed.

*** Comparing files with diff, merging them with ediff
[[https://www.gnu.org/software/emacs/manual/html_node/ediff/][Ediff manual]]

Ediff opens up three frames, frame A and B and a small frame that controls the diffing using hotkeys
key ? shows help, "n" or space jumps to next diff, keys a/b copies region to A (upper frame)/B (lower)
key r followed by b restores the buffer in B
Q: How to undo the last action?
*** Visibility
Tab cycles visibility
|-----------+-----------------------------+---------------------------------------------------------------|
| C-c C-x b | org-tree-to-indirect-buffer | Shows the current subtree in a new buffer ("indirect buffer") |
|-----------+-----------------------------+---------------------------------------------------------------|
* Extending Emacs (Emacs Lisp)
** Learn Emacs lisp
[[http://www.emacswiki.orpg/emacs/LearnEmacsLisp]]

*** Use ‘C-x ESC ESC’ to repeat commands you execute, and look at the Emacs-Lisp code that executes them, before hitting ‘RET’ (Return) – see RepeatLastCommand.


*** Use ‘C-h f’ (‘describe-function’) and ‘C-h v’ (‘describe-variable’) to understand commands and variables you use. In the help description, click the function or variable name (link) to go directly to the source code that defines it. Try to read the source code. When you want to know what some function you see used does, use ‘C-h f’ on it… Got it?


*** Use ‘C-h k’ to see which commands you are executing when you use keys. Then follow the previous bullet: click the name (link) of the command to see its source code…


*** Read the Emacs Lisp Introduction: EmacsLispIntro. Use ‘C-h i’, then choose `Emacs Lisp Intro’. You can also read this manual on the Web.


*** Read the Emacs Lisp Reference manual: EmacsLispReference. Use ‘C-h i’, then choose ‘Elisp’ (Emacs Lisp is sometimes called “Elisp”). You can also read this manual on the Web.
SteveYegge’s intro to the language. (FIXME: Link)

** Resources
[[https://www.gnu.org/software/emacs/manual/html_node/elisp/][E-lisp manual]], 
[[http://www.gnu.org/software/emacs/emacs-lisp-intro/][Introduction to Emacs Lisp]]
** Basics
Comparisons: note the difference between "eq" and "equal". While "eq" tests if x and y are the same object, "equal" tests if they have equal contents.

** Evaluating lisp code
*** ielm
M-x ielm will run a REPL, similar to a Python "interpreter" but for Elisp.
(For other REPLs see SLIME, nrepl)

** C-x C-e evaluates last expression (Position the cursor after the expression)
** Debugging
(bisect) -- If "emacs --debug-init"
           doesn't help, comment out half of ~/.emacs and try to
           reproduce the issue. Recurse as necessary. See also
           <-q> and <ielm>.

Another type of "bisect" method is putting (message "DEBUG ONE"), (message "DEBUG TWO") in various locations in the code to find where it fails.
** Useful e-lisp basics
(message "hi") outputs a message to the *Message* buffer, this can be useful for debugging.

** using 'package
There's a repository called [[http://marmalde-repo.org]["marmalade"]] that contains an assortment of extensions
** Keybindings
[[http://www.masteringemacs.org/articles/2011/02/08/mastering-key-bindings-emacs/][Mastering keybindings in Emacs]]

M-x describe-bindings or C-h b displays all keybindings

** Colortheme extension
use M-x color-theme-print to save your own colortheme
** Macros
F3, F4 (or C-x (, C-x ) ) to begin and end recording of a macro.
M-x name-last-kbd-macro
** Parentheses
*** Paredit
=paredit-mode= 
C-q, force insert of parentheses.
M-(  Wrap parens around something
M-s Remove parens from something
M-S-s Split sexpr into two
M-S-j join sexprs
C-u DEL force delete paren or bracket.


Further info:
[[http://p.hagelb.org/paredit-screencast.html]]

*** Test
#+BEGIN_SRC emacs-lisp
    (defun foo ()
    "foo is cool"
    )
    (message "hi")
#+END_SRC
*** Jump to matching parentheses
[[http://emacs-fu.blogspot.se/2009/01/balancing-your-parentheses.html][Balancing your parentheses - emacs fu]]

#+BEGIN_SRC emacs-lisp
    (defun paren-match ()
    "Tries to jump to the matching parenthesis to the one currently
    under the point. Useful if the matching paren is out of sight. "
    (interactive)
    (cond ((looking-at "[{\[\(]") (forward-sexp 1) (backward-char))
    ((looking-at "[]})]") (forward-char) (backward-sexp 1))
    (t (message "Point not at a parenthesis."))))
#+END_SRC
* Personal notes
** System/platform specific
*** My current emacs notes for Win8

~/.emacs is in
- c:/Users/jmn/Appdata/Roaming/.emacs
** For me to check out
- Sauron (by djcb)
  [[https://github.com/djcb/sauron]] 

  Sauron is an emacs mode for keeping track of events happening
  in the (emacs) world around you. Events are things like ‘appointment
  in 5 minutes’, ‘bob pinged you on IRC’, ‘torrent download is
  complete’ etc. Sauron shows those events like a list – basically
  like a log. You can ‘activate’ an event by either pressing RET when
  point is on it, or clicking it with the middle mouse button
  (<mouse-2>).
** Wouldn't it be great if... / Wishlist
Better bookmarks: If the bookmarks could show the title of each document. 
* Meta
** About this file
This file is written using Emacs org-mode, exported to HTML and published onto Github pages using git (magit). View [[/static/emacs.org][the org source file]] here.

I keep this file in a directory  =~/git/notes/emacs.org= and apply the following configuration to my Emacs for publishing:
#+BEGIN_SRC emacs-lisp
        (setq org-publish-project-alist
              (list
               `("emacs-notes"
                   :base-directory "~/git/notes/"
                   :base-extension "org"
                   :publishing-directory "~/git/jmn.github.io"
                   :recursive nil
                   :publishing-function org-html-publish-to-html
                   ))
              )
#+END_SRC

To publish the file, I then use =M-x org-export-dispatch= (binding =C-c C-e)= and select publish this file. I then use =M-x magit-status= (=C-u C-c m=)  to stage (=s=), commit (=c=) and push (=P=) the exported HTML file onto Github pages.

# Emacs 25.0.50.1 (Org mode 7.9.1)
