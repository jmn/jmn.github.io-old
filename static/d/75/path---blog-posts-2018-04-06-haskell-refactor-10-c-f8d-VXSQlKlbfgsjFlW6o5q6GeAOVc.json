{"data":{"markdownRemark":{"html":"<p>Using the symbols <code>>>=</code> (bind) <code>&#x3C;$></code> (fmap) and <code>&#x3C;*></code> we can improve our Haskell programs.</p>\n<!--more-->\n<p>For example:</p>\n<pre><code class=\"language-haskell\">extractDomain :: Text -> Text\nextractDomain url =\n    case parseURI (unpack url) of\n        Nothing -> \"\"\n        Just uri ->\n            case uriAuthority uri of\n                Nothing -> \"\"\n                Just auth -> pack $ uriRegName auth\n</code></pre>\n<pre><code class=\"language-haskell\">extractDomainB :: Text -> Text\nextractDomainB url = fromMaybe \"\" $ parseURI (unpack url)\n                     >>= uriAuthority\n                     >>= pure . pack . uriRegName\n</code></pre>\n<pre><code class=\"language-haskell\">-- | Retrieve the members of a set\nsout :: Connection -> ByteString -> IO [ByteString] -- (Either Reply [ByteString])\nsout conn k = do\n  members &#x3C;-\n    liftIO $\n    runRedis conn $ do\n      res &#x3C;- (smembers k)\n      mem &#x3C;-\n        case res of\n          Left _ -> return [] -- Hmm\n          Right m -> return m\n      return mem\n  return members\n</code></pre>\n<pre><code class=\"language-haskell\">-- | Retrieve the members of a set\nsout :: Connection -> ByteString -> IO [ByteString]\nsout conn k = \n    runRedis conn $ either (return []) id &#x3C;$> smembers k\n</code></pre>","frontmatter":{"title":"Improving basic haskell programs"}}},"pageContext":{"slug":"/blog-posts/2018-04-06-haskell-refactor/"}}